Q1
#include <iostream>
int max( int data[], std::size_t capacity);
int main();
int data[] = {1, 2, 3, 4};

int max( int data[], std::size_t capacity){
	int max = data[0];
	for (std::size_t a = 0; a < capacity; ++a){
		if (data[a] > max);
		max = a;
	}
	return max;
}
int main(){
  std::cout << max( data, 4);
}

Q2

#include <iostream>

int main();
unsigned int ones(bool binary_string[], std::size_t capacity);
unsigned int ones(bool binary_string[], std::size_t capacity){
	int count = 0;
	for (std::size_t a = 0; a < capacity; ++a){
		if (binary_string[a] == true){
		    ++count;
      }
	}
	return count;
}


int main(){
  bool binary[] = { 1, 0};
  std::cout << ones(binary, 2);
}

Q3
#include <iostream>
#include <cmath>

int main();
int bin2dec( bool binary_string[16]);
int bin2dec( bool binary_string[16]){
	int number = 0;
	for (std::size_t i = 0; i < 16; ++i){
		if (binary_string[i] == 1){
			number += pow(2, (15 - i));
		}
	}
	return number;
}
int main(){
  bool binary[] = { 1, 0, 1, 1, 1, 0, 1 ,0 ,1, 0, 1, 1, 1, 0, 1, 0};
  std::cout << bin2dec(binary);
}

Q4
#include <iostream>
#include <cmath>

int main();
void reverse( int data[], std::size_t capacity);
void reverse( int data[], std::size_t capacity){
	int data_re[capacity];
	for (std::size_t i = 0; i < capacity; ++i){
		data_re[i] = data[capacity - 1 - i];
	}
	for ( std::size_t i = 0; i < capacity; ++i){
		data[i] = data_re[i];
	}
}
int main(){
  int binary[] = { 1, 0, 1, 1, 1, 0, 1 ,0 ,1, 0, 1, 1, 1, 0, 1, 0};
  reverse(binary, 16);
  for (int i = 0; i < 16; ++i){
    std::cout << binary[i];
  }
}

Q5
#include <iostream>
#include <cmath>

int main();
void rotate( int data[], std::size_t capacity, unsigned int rotate_by );
void rotate( int data[], std::size_t capacity, unsigned int rotate_by ){
	int data_re[capacity];
	for (std::size_t i = 0; i < capacity - rotate_by; ++i){
		data_re[i] = data[rotate_by + i];
	}
	for (std::size_t i = capacity - rotate_by; i < capacity; ++i){
		data_re[i] = data[i - (capacity - rotate_by)];
	}
	for (std::size_t i = 0; i < capacity; ++i){
		data[i] = data_re[i];
	}
}

int main(){
  int binary[] = { 1, 0, 1, 1, 1};
  rotate(binary, 5, 4);
  for (int i = 0; i < 5; ++i){
    std::cout << binary[i];
  }
}


Q6
#include <iostream>
#include <cmath>

int main();
bool palindrome( char data[], std::size_t capacity);
bool palindrome( char data[], std::size_t capacity){
	bool is_palindrome = true;
	if (capacity%2 == 0){
		for ( std::size_t i = 0; i < capacity/2; ++i){
			if (data[i] != data[capacity - 1 - i]){
				is_palindrome = false;
			}
		}
	}
	else{
		for (std::size_t i = 0; i < (capacity-1)/2; ++i){
			if (data[i] != data[capacity - 1 - i]){
				is_palindrome = false;
			}
		}
	}
	return is_palindrome;
}
int main(){
  char binary[] = { 'c', 'd', 'd', 'c'};
  std::cout << palindrome(binary, 4);
}

Q7
#include <string>
struct address;
struct address{
	std::string name;
	std::string room;
	std::string street;
	std::string city;
	std::string state;
	std::string country;
};
Q8
#include <iostream>
#include <cmath>
#include <string>
int main();

struct three_ints_t;
struct three_ints_t{
	int large1;
	int large2;
	int large3;
};
three_ints_t largest_three( int data[], std::size_t capacity);
three_ints_t largest_three( int data[], std::size_t capacity){
	three_ints_t num;
	num.large1 = data[0];
	num.large2 = data[0];
	num.large3 = data[0];
	for ( std::size_t i = 0; i < capacity; ++i){
		if ( data[i] > num.large1){
			num.large1 = data[i];
		}
		else if ( data[i] > num.large2){
			num.large2 = data[i];
    }
		else if ( data[i] > num.large3){
			num.large3 = data[i];
		}
		else{
		}
	}
	return num;
}
int main(){
  int binary[] = { 1, 3, 2, 9, 4};
  std::cout << largest_three(binary, 5).large1;

}

Q9
#include <iostream>
#include <cmath>
#include <string>
int main();


struct point_t;
struct point_t{
	int x;
	int y;
};
double distance( point_t u, point_t v);
double distance( point_t u, point_t v){
	return sqrt(pow(v.x - u.x, 2) + pow(v.y - u.y, 2));
}
int main(){
  point_t a;
  a.x = 1;
  a.y = 2;
  point_t b;
  b.x = 2;
  b.y =4;
  std::cout << distance(a, b);

}
Q10
#include <string>
#include <cmath>
const double PI = 3.141592653589793238463;
struct shape_t;
struct output;
output area( shape_t shape);
struct shape_t{
	std::string name;
	struct circle;
	struct rectangle;
	struct square;
	struct kite;
	struct parallelogram;
	struct rhombus;
	struct trapzoid;

	struct circle{

		double r;
	};
	struct rectangle{
		double side1;
		double side2;
	}
	struct square{
		double side;
	};
	struct kite{
		double diagonal1;
		double diagonal2;
	};
	struct parallelogram{
		double height;
		double base;
	};
	struct rhombus{
		double diagonal1;
		double diagonal2;
	};
	struct trapezoid{
		double top;
		double base;
		double h;
	};

};
struct area_t{
	std::string name;
	double area;
}

area_t area( shape_t shape){
	area_t output;
	if (shape.name = "circle"){
		output.name = "circle";
		output.area = PI*pow(shape.circle.r, 2);
	}
	else if (shape.name = "rectangle"){
		output.name = "rectangle";
		output.area = shape.rectangle.side1*shape.rectangle.side2;
	}
	else if (shape.name = "square"){
		output.name = "
	}
	else if (shape.name = "kite"){
		output.name = "
	}
	else if (shape.name = "parallelopgram"){
		output.name = "
	}
	else if (shape.name = "rhombus"){
		output.name = "
	}
	else if (shape.name = "trapezoid"){
		output.name = "
	}
	else{
	}
}
Sorry, I don't think I am doing the right thing here, I will submit this one first then see
If I can come up with an answer.
